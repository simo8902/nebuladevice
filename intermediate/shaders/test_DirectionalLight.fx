//------------------------------------------------------------------------------
// test.fx
// Generated by nsc3.exe.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
/**
    Input/output declarations.
*/
struct vsInput
{
    float3 Binormal : BINORMAL;
    float3 Normal : NORMAL;
    float3 Position : POSITION;
    float3 Tangent : TANGENT;
    float2 TexCoord0 : TEXCOORD0;
};

struct vsOutput
{
    float3 TangentHalfVec : TEXCOORD0;
    float3 TangentLightVec : TEXCOORD1;
    float2 TexCoord0 : TEXCOORD2;
};

struct psOutput
{
    float4 Color : COLOR;
};

//------------------------------------------------------------------------------
/**
    Shader constants.
*/
float MaterialSpecularPower;
float4x4 ModelEyeTransform;
float4x4 ModelLightTransform;
shared float4 LightDiffuse;
shared float LightRange;
shared float4 LightSpecular;


//------------------------------------------------------------------------------
/**
    Texture samplers.
*/
texture DiffuseMap0;
sampler DiffuseMap0Sampler = sampler_state
{
    Texture = <DiffuseMap0>
    AddressU = Wrap
    AddressV = Wrap
    MagFilter = Linear
    MinFilter = Linear
    MipFilter = Point
}

texture EmissiveMap0;
sampler EmissiveMap0Sampler = sampler_state
{
    Texture = <EmissiveMap0>
    AddressU = Wrap
    AddressV = Wrap
    MagFilter = Linear
    MinFilter = Linear
    MipFilter = Point
}

texture SpecularMap0;
sampler SpecularMap0Sampler = sampler_state
{
    Texture = <SpecularMap0>
    AddressU = Wrap
    AddressV = Wrap
    MagFilter = Linear
    MinFilter = Linear
    MipFilter = Point
}

//------------------------------------------------------------------------------
/**
    'PhongLighting' Vertex Shader Function.
*/
void vsPhongLighting(
    in float4x4 modelEyeTransform,
    in float4x4 modelLightTransform,
    in float3 vertexBinormal,
    in float3 vertexNormal,
    in float3 vertexPos,
    in float3 vertexTangent,
    out float3 tangentHalfVec,
    out float3 tangentLightVec)
{
    // light vector is z-component of model light transform
    float3 modelLightVec = modelLightTransform[2].xyz;
    float3 eVec = normalize(modelEyeTransform[2].xyz - vertexPos);
    float3 hVec = normalize(normalize(modelLightVec) + eVec);
    float3x3 tangentMatrix = float3x3(vertexTangent, vertexBinormal, vertexNormal);
    tangentLightVec = mul(tangentMatrix, modelLightVec);
    tangentHalfVec = mul(tangentMatrix, hVec);
}

//------------------------------------------------------------------------------
/**
    'PhongLighting' Pixel Shader Function.
*/
void psPhongLighting(
    in float4 lightDiffuse,
    in float lightRange,
    in float4 lightSpecular,
    in float4 matDiffuse,
    in float4 matEmissive,
    in float4 matSpecular,
    in float matSpecularPower,
    in float shadowValue,
    in float3 tangentHalfVec,
    in float3 tangentLightVec,
    in float3 tangentSurfaceNormal,
    out float4 outColor)
{
    // compute light component intensities
    float specIntensity = pow(saturate(dot(tangentSurfaceNormal, normalize(tangentHalfVec))), matSpecularPower);
    float diffIntensity = dot(tangentSurfaceNormal, normalize(lightVec));
    // compute distance attenuation and shadowing
    diffIntensity *= shadowValue * (1.0 - saturate(length(lightVec) / LightRange));
    // sum up color components
    float3 diffuse = matDiffuse.rgb * lightDiffuse.rgb * diffIntensity;
    float3 specular = matSpecular.rgb * lightSpecular.rgb * specIntensity;
    float3 emissive = matEmissive.rgb;
    outColor = float4(diffuse + specular + emissive, matDiffuse.a);
}

//------------------------------------------------------------------------------
/**
    'Texture2D' Pixel Shader Function.
*/
void psTexture2D(
    in float2 texCoords,
    in sampler texSampler,
    out float4 outColor)
{
    outColor = tex2D(texSampler, texCoords);
}

//------------------------------------------------------------------------------
/**
    Vertex Shader
*/
vsOutput vsMain(vsInput vsIn)
{
    //--- Lighting ---
    float4x4 Lighting_modelEyeTransform = ModelEyeTransform;
    float4x4 Lighting_modelLightTransform = ModelLightTransform;
    float3 Lighting_vertexBinormal = vsIn.Binormal;
    float3 Lighting_vertexNormal = vsIn.Normal;
    float3 Lighting_vertexPos = vsIn.Position;
    float3 Lighting_vertexTangent = vsIn.Tangent;
    float3 Lighting_tangentHalfVec;
    float3 Lighting_tangentLightVec;
    vsPhongLighting(Lighting_modelEyeTransform, Lighting_modelLightTransform, Lighting_vertexBinormal, Lighting_vertexNormal, Lighting_vertexPos, Lighting_vertexTangent, Lighting_tangentHalfVec, Lighting_tangentLightVec);

    //--- function output ---
    vsOutput vsOut;
    vsOut.TangentHalfVec = Lighting_tangentHalfVec;
    vsOut.TangentLightVec = Lighting_tangentLightVec;
    vsOut.TexCoord0 = vsIn.TexCoord0;
    return vsOut;
}
//------------------------------------------------------------------------------
/**
    Pixel Shader
*/
psOutput psMain(vsOutput psIn)
{
    //--- SampleSpecularMap ---
    float2 SampleSpecularMap_texCoords = psIn.TexCoord0;
    sampler SampleSpecularMap_texSampler = SpecularMap0Sampler;
    float4 SampleSpecularMap_outColor;
    psTexture2D(SampleSpecularMap_texCoords, SampleSpecularMap_texSampler, SampleSpecularMap_outColor);

    //--- SampleEmissiveMap ---
    float2 SampleEmissiveMap_texCoords = psIn.TexCoord0;
    sampler SampleEmissiveMap_texSampler = EmissiveMap0Sampler;
    float4 SampleEmissiveMap_outColor;
    psTexture2D(SampleEmissiveMap_texCoords, SampleEmissiveMap_texSampler, SampleEmissiveMap_outColor);

    //--- SampleDiffuseMap ---
    float2 SampleDiffuseMap_texCoords = psIn.TexCoord0;
    sampler SampleDiffuseMap_texSampler = DiffuseMap0Sampler;
    float4 SampleDiffuseMap_outColor;
    psTexture2D(SampleDiffuseMap_texCoords, SampleDiffuseMap_texSampler, SampleDiffuseMap_outColor);

    //--- Lighting ---
    float4 Lighting_lightDiffuse = LightDiffuse;
    float Lighting_lightRange = LightRange;
    float4 Lighting_lightSpecular = LightSpecular;
    float4 Lighting_matDiffuse = SampleDiffuseMap_outColor;
    float4 Lighting_matEmissive = SampleEmissiveMap_outColor;
    float4 Lighting_matSpecular = SampleSpecularMap_outColor;
    float Lighting_matSpecularPower = MaterialSpecularPower;
    float Lighting_shadowValue = >>> SLOT NOT CONNECTED <<<;
    float3 Lighting_tangentHalfVec = psIn.TangentHalfVec;
    float3 Lighting_tangentLightVec = psIn.TangentLightVec;
    float3 Lighting_tangentSurfaceNormal = >>> SLOT NOT CONNECTED <<<;
    float4 Lighting_outColor;
    psPhongLighting(Lighting_lightDiffuse, Lighting_lightRange, Lighting_lightSpecular, Lighting_matDiffuse, Lighting_matEmissive, Lighting_matSpecular, Lighting_matSpecularPower, Lighting_shadowValue, Lighting_tangentHalfVec, Lighting_tangentLightVec, Lighting_tangentSurfaceNormal, Lighting_outColor);

    //--- function output ---
    psOutput psOut;
    psOut.Color = Lighting_outColor;
    return psOut;
}
